// This is the public API offered by your entity.
syntax = "proto3";

import "google/protobuf/empty.proto";
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";
import "actor/person/api.proto";
import "actor/person/domain/state.proto";
import "actor/user/domain/state.proto";
import "actor/messaging/domain/dto.proto";

package actor.user;

message CreateUserCommand {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string name = 2;
}

message UserView {
  string name = 1;
  repeated string persons = 2;
  repeated string messages = 3;
}

message GetUserCommand {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
}


service UserService {
  option (akkaserverless.codegen) = {
    event_sourced_entity: {
      name: "actor.user.User"
      entity_type: "user"
      state: "actor.user.domain.UserState",
      events: [
        "actor.user.domain.UserCreated",
        "actor.user.domain.AddedPerson",
        "actor.user.domain.ReceiveMessageDto"
      ]
    }
  };

  rpc CreateUser (CreateUserCommand) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/{user_id}"
      body: "*"
    };
  }

  rpc GetUser (GetUserCommand) returns (UserView) {
    option (google.api.http) = {
      get: "/user/{user_id}"
    };
  }

  rpc AddPerson(person.domain.PersonCreated) returns (google.protobuf.Empty) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "person"
    };
  }

  rpc ReceiveMessage (actor.user.domain.SendMessageDto) returns (google.protobuf.Empty) {
    option (akkaserverless.method).eventing.in = {
      topic: "message"
    };
  }


}
