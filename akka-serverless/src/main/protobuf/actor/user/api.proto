// This is the public API offered by your entity.
syntax = "proto3";

import "google/protobuf/empty.proto";
import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";
import "actor/person/api.proto";
import "actor/person/domain/state.proto";
import "actor/user/domain/state.proto";
import "actor/messaging/domain/dto.proto";

package actor.user;

message CreateUserCommand {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string name = 2;
}

message UserView {
  string name = 1;
  repeated string persons = 2;
  repeated string messages = 3;
}

message GetUserCommand {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
}

message AddChatInvitation {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string chat_id = 2;
}

message DeleteChatInvitation {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string chat_id = 2;
}

message AcceptChatInvitation {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string chat_id = 2;
}

message RefuseChatInvitation {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string chat_id = 2;
}

message AddContactInvitation {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string contact = 2;
}

message DeleteContactInvitation {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string contact = 2;
}

message AddContact {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string contact = 2;
}

message DeleteContact {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
  string contact = 2;
}

message ListContactsInvitations {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
}

message ListContacts {
  string user_id = 1 [(akkaserverless.field).entity_key = true];
}


message Contacts {
  repeated string contacts = 1;
}

message ContactInvites {
  repeated string invites = 1;
}

service UserService {
  option (akkaserverless.codegen) = {
    event_sourced_entity: {
      name: "actor.user.User"
      entity_type: "user"
      state: "actor.user.domain.UserState",
      events: [
        "actor.user.domain.UserCreated",
        "actor.user.domain.AddedPerson",
        "actor.user.domain.ReceiveMessageDto",
        "actor.user.domain.AddedContact",
        "actor.user.domain.AddedContactInvitation",
        "actor.user.domain.DeletedContact",
        "actor.user.domain.DeletedContactInvitation",
        "actor.user.domain.AddedChatInvitation",
        "actor.user.domain.RefusedChatInvitation",
        "actor.user.domain.AcceptedChatInvitation"
      ]
    }
  };

  rpc createUser (CreateUserCommand) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/{user_id}"
      body: "*"
    };
  }

  rpc getUser (GetUserCommand) returns (UserView) {
    option (google.api.http) = {
      get: "/user/{user_id}"
    };
  }

  rpc addPerson(person.domain.PersonCreated) returns (google.protobuf.Empty) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "person"
    };
  }

  rpc receiveMessage (actor.user.domain.SendMessageDto) returns (google.protobuf.Empty) {
    option (akkaserverless.method).eventing.in = {
      topic: "message"
    };
  }


  rpc addContactInvitation(AddContactInvitation) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/{user_id}/contacts/invites"
      body: "*"
    };
  }

  rpc deleteContactInvitation(DeleteContactInvitation) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/{user_id}/invites"
      body: "*"
    };
  }

  rpc addContact(AddContact) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/{user_id}/contacts/accept"
      body: "*"
    };
  }

  rpc deleteContact(DeleteContact) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/{user_id}/contacts"
      body: "*"
    };
  }

  rpc getContacts (ListContacts) returns (Contacts) {
    option (google.api.http) = {
      get: "/user/{user_id}/contacts"
    };
  }

  rpc getContactInvitations (ListContactsInvitations) returns (ContactInvites) {
    option (google.api.http) = {
      get: "/user/{user_id}/contacts/invites"
    };
  }

  rpc addChatInvitation(AddChatInvitation) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/{user_id}/chats/invites"
      body: "*"
    };
  }

  rpc deleteChatInvitation(DeleteContactInvitation) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/{user_id}/chats/invites"
      body: "*"
    };
  }

  rpc acceptChatInvitation(AcceptChatInvitation) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/{user_id}/chats"
      body: "*"
    };
  }

  rpc refuseChatInvitation(RefuseChatInvitation) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/{user_id}/chats"
      body: "*"
    };
  }

}
